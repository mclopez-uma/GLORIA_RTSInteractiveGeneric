
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package eu.gloria.rti;

import java.math.BigInteger;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Logger;

import javax.annotation.Resource;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;

import eu.gloria.rt.entity.device.DbFileInfo;
import eu.gloria.rt.entity.device.DewRemoverChannelType;
import eu.gloria.rt.entity.device.ImageFormat;
import eu.gloria.rt.exception.CommunicationException;
import eu.gloria.rt.exception.RTException;
import eu.gloria.rt.exception.UnsupportedOpException;
import eu.gloria.rtc.BarometerControl;
import eu.gloria.rtc.CameraControl;
import eu.gloria.rtc.CloudDetectorSensorControl;
import eu.gloria.rtc.DBControl;
import eu.gloria.rtc.DeviceManager;
import eu.gloria.rtc.DewRemoverControl;
import eu.gloria.rtc.DomeControl;
import eu.gloria.rtc.FilterWheelControl;
import eu.gloria.rtc.FocuserControl;
import eu.gloria.rtc.MountControl;
import eu.gloria.rtc.RHSensorControl;
import eu.gloria.rtc.RainSensorControl;
import eu.gloria.rtc.RotatorControl;
import eu.gloria.rtc.StormSensorControl;
import eu.gloria.rtc.SurveillanceCameraControl;
import eu.gloria.rtc.TemperatureSensorControl;
import eu.gloria.rtc.WeatherVaneControl;
import eu.gloria.rtc.WeatherVaneControlInterface;
import eu.gloria.rtc.WindSpeedSensorControl;
import eu.gloria.rti.fault.ErrorDetail;
import eu.gloria.rti.fault.ErrorType;
import eu.gloria.rti.session.AuthenticationException;
import eu.gloria.rti.session.InvalidSessionException;
import eu.gloria.rti.session.InvalidUsrPwException;
import eu.gloria.rti.session.RtiSession;
import eu.gloria.rti.session.RtiSessionFactory;
import eu.gloria.rti.tool.RtiExceptionFactory;
import eu.gloria.tools.log.LogUtil;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2013-01-22T13:26:40.926+01:00
 * Generated source version: 2.6.1
 * 
 */

@javax.jws.WebService(
                      serviceName = "gloria_rti",
                      portName = "gloria_rtiSOAP",
                      targetNamespace = "http://gloria.eu/rti",
                      wsdlLocation = "http://localhost:8080/RTI/services/gloria_rtiSOAP?wsdl",
                      endpointInterface = "eu.gloria.rti.GloriaRti")
public class GloriaRtiImpl implements GloriaRti {

	@Resource
	WebServiceContext wsContext;

	private static final Logger LOG = Logger.getLogger(GloriaRtiImpl.class
			.getName());

	private boolean debug = true;

	/**
	 * Validates the session: -The user must be identified previously.
	 * 
	 * @param session
	 *            Session token
	 * @throws RtiError
	 *             In error case
	 */
	private void validateSession(String session) throws RtiError {

		try {
			RtiSession rtiSession = RtiSessionFactory.getSession(wsContext,
					session);

			LogUtil.info(this, "Access SESSIONID::" + rtiSession.getId());

			if (debug)
				return;

			rtiSession.rtiValidateSession();

		} catch (InvalidSessionException authEx) {
			ErrorDetail detail = new ErrorDetail();
			detail.setCode(authEx.getErrorCode());
			detail.setDesc(authEx.getMessage());
			detail.setType(ErrorType.INVALID_SESSION);
			RtiError error = new RtiError(authEx.getMessage(), detail);
			throw error;
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focGetPosition(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long focGetPosition(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation 'focGetPosition'");

		validateSession(session);

		
		FocuserControl dev = new FocuserControl();
		try {
			return dev.focGetPosition(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}
	

	public void domSetTracking(java.lang.String session,
			java.lang.String deviceId, boolean value) throws RtiError {
		LOG.info("Executing operation domSetTracking");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domSetTracking(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#loginCert(java.lang.String user
	 * ,)javax.xml.datatype.XMLGregorianCalendar time ,)java.lang.String sign
	 * ,)eu.gloria.rti.SessionType sessionType )*
	 */
	public java.lang.String loginCert(java.lang.String user,
			javax.xml.datatype.XMLGregorianCalendar time,
			java.lang.String sign, eu.gloria.rti.SessionType sessionType)
			throws RtiError {
		LogUtil.info(this, "Executing operation loginCert");
		System.out.println(user);
		System.out.println(time);
		System.out.println(sign);
		System.out.println(sessionType);
		try {
			java.lang.String _return = "_return-1715869913";
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetLastExposureStart(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public javax.xml.datatype.XMLGregorianCalendar camGetLastExposureStart(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetLastExposureStart");

		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			Date date = dev.camGetLastExposureStart(deviceId);
			GregorianCalendar gc = new GregorianCalendar();
			gc.setTimeInMillis(date.getTime());
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);		
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetTiltMin(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetTiltMin(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetTiltMin");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetTiltMin(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schTmplPlanGet(java.lang.String session
	 * ,)java.lang.String id ,)java.lang.String user
	 * ,)javax.xml.datatype.XMLGregorianCalendar creationFrom
	 * ,)javax.xml.datatype.XMLGregorianCalendar creationTo )*
	 */
	public java.util.List<eu.gloria.rt.entity.scheduler.TemplatePlan> schTmplPlanGet(
			java.lang.String session, java.lang.String id,
			java.lang.String user,
			javax.xml.datatype.XMLGregorianCalendar creationFrom,
			javax.xml.datatype.XMLGregorianCalendar creationTo) throws RtiError {
		LogUtil.info(this, "Executing operation schTmplPlanGet");
		System.out.println(session);
		System.out.println(id);
		System.out.println(user);
		System.out.println(creationFrom);
		System.out.println(creationTo);
		try {
			java.util.List<eu.gloria.rt.entity.scheduler.TemplatePlan> _return = new java.util.ArrayList<eu.gloria.rt.entity.scheduler.TemplatePlan>();
			eu.gloria.rt.entity.scheduler.TemplatePlan _returnVal1 = new eu.gloria.rt.entity.scheduler.TemplatePlan();
			_returnVal1.setId("Id-2006113964");
			_returnVal1.setUser("User-2102948367");
			_returnVal1.setCreationDate(javax.xml.datatype.DatatypeFactory
					.newInstance().newXMLGregorianCalendar(
							"2012-05-25T10:29:19.659+02:00"));
			_returnVal1.setXml("Xml-1511881008");
			_returnVal1.setDescription("Description1796243975");
			_return.add(_returnVal1);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	public java.lang.String focGetCamera(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation focGetCamera");
        validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focGetCamera(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbDeleteFile(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String fileName )*
	 */
	public void dbDeleteFile(java.lang.String session,
			java.lang.String deviceId, java.lang.String fileName)
			throws RtiError {
		LogUtil.info(this, "Executing operation dbDeleteFile");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			dev.dbDeleteFile(deviceId, fileName);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanMoveAzis(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanMoveAzis(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanMoveAzis");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanMoveAzis(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camCanAbortExposure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camCanAbortExposure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camCanAbortExposure");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camCanAbortExposure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void barSetMeasureStates(java.lang.String session,java.lang.String deviceId,java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states) throws RtiError    { 
		LogUtil.info(this, "Executing operation barSetMeasureStates");
		validateSession(session);

		BarometerControl dev = new BarometerControl();
		try {
			dev.barSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rndGetMeasureUnit(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit rndGetMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation rndGetMeasureUnit");
		validateSession(session);

		RainSensorControl dev = new RainSensorControl();
		try {
			return dev.rndGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetPixelSizeX(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetPixelSizeX(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetPixelSizeX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetPixelSizeX(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domPark(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void domPark(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation domPark");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domPark(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHasShutter(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHasShutter(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHasShutter");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasShutter(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntSlewObject(java.lang.String session,
			java.lang.String deviceId, java.lang.String object) throws RtiError {
		LOG.info("Executing operation mntSlewObject");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSlewObject(deviceId, object);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domSetPark(java.lang.String session
	 * ,)java.lang.String deviceId ,)double altitude ,)double azimuth )*
	 */
	public void domSetPark(java.lang.String session, java.lang.String deviceId,
			double altitude, double azimuth) throws RtiError {
		LogUtil.info(this, "Executing operation domSetPark");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domSetPark(deviceId, altitude, azimuth);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domOpen(java.lang.String session
	 * ,)java.lang.String deviceId ,)int element )*
	 */
	public void domOpen(java.lang.String session, java.lang.String deviceId,
			int element) throws RtiError {
		LogUtil.info(this, "Executing operation domOpen");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domOpen(deviceId, element);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetGamma(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void camSetGamma(java.lang.String session,
			java.lang.String deviceId, long value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetGamma");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetGamma(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHasGamma(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHasGamma(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHasGamma");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasGamma(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public double tempGetMeasure(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation tempGetMeasure");
		validateSession(session);

		TemperatureSensorControl dev = new TemperatureSensorControl();
		try {
			return dev.tempGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schTmplPlanDelete(java.lang.String session
	 * ,)java.lang.String id )*
	 */
	public void schTmplPlanDelete(java.lang.String session, java.lang.String id)
			throws RtiError {
		LogUtil.info(this, "Executing operation schTmplPlanDelete");
		System.out.println(session);
		System.out.println(id);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntMoveAxis(java.lang.String session
	 * ,)java.lang.String deviceId ,)int axisType ,)double rate )*
	 */
	public void mntMoveAxis(java.lang.String session,
			java.lang.String deviceId, int axisType, double rate)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntMoveAxis");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntMoveAxis(deviceId, axisType, rate);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schPlanCreate(java.lang.String session
	 * ,)java.lang.String idTmpl ,)java.lang.String xmlMapping
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowStart
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowEnd ,)long
	 * execMaxTime )*
	 */
	public java.lang.String schPlanCreate(java.lang.String session,
			java.lang.String idTmpl, java.lang.String xmlMapping,
			javax.xml.datatype.XMLGregorianCalendar execWindowStart,
			javax.xml.datatype.XMLGregorianCalendar execWindowEnd,
			long execMaxTime) throws RtiError {
		LogUtil.info(this, "Executing operation schPlanCreate");
		System.out.println(session);
		System.out.println(idTmpl);
		System.out.println(xmlMapping);
		System.out.println(execWindowStart);
		System.out.println(execWindowEnd);
		System.out.println(execMaxTime);
		try {
			java.lang.String _return = "_return1882958924";
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetGamma(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long camGetGamma(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetGamma");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetGamma(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntStopSlew(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void mntStopSlew(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntStopSlew");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntStopSlew(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetGuideRateDeclination(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double mntGetGuideRateDeclination(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetGuideRateDeclination");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetGuideRateDeclination(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#cldGetMeasure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double cldGetMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation cldGetMeasure");
		validateSession(session);

		CloudDetectorSensorControl dev = new CloudDetectorSensorControl();
		try {
			return dev.cldGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetAutoGain(java.lang.String session,
			java.lang.String deviceId, boolean value) throws RtiError {
		LOG.info("Executing operation camSetAutoGain");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetAutoGain(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public eu.gloria.rt.entity.device.Image camGetImage(java.lang.String session,java.lang.String deviceId,eu.gloria.rt.entity.device.ImageFormat format) throws RtiError    { 

		LogUtil.info(this, "Executing operation camGetImage-2");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetImage(deviceId, format);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetROINumY(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetROINumY(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetROINumY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetROINumY(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#devUpdateDeviceProperty(java.lang.String
	 * session ,)java.lang.String deviceId ,)java.lang.String name
	 * ,)java.util.List<java.lang.String> value )*
	 */
	public boolean devUpdateDeviceProperty(java.lang.String session,
			java.lang.String deviceId, java.lang.String name,
			java.util.List<java.lang.String> value) throws RtiError {
		LogUtil.info(this, "Executing operation devUpdateDeviceProperty");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devUpdateDeviceProperty(deviceId, name, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#devDisconnect(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void devDisconnect(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation devDisconnect");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			dev.devDisconnect(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focGetStepSize(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double focGetStepSize(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation focGetStepSize");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focGetStepSize(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dwrGetChannelType(java.lang.String session
	 * ,)java.lang.String deviceId ,)int channel )*
	 */
	public eu.gloria.rt.entity.device.DewRemoverChannelType dwrGetChannelType(
			java.lang.String session, java.lang.String deviceId, int channel)
			throws RtiError {
		LogUtil.info(this, "Executing operation dwrGetChannelType");
		validateSession(session);

		DewRemoverControl dev = new DewRemoverControl();
		try {
			return dev.dwrGetChannelType(deviceId, channel);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamHasBrightness(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean scamHasBrightness(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamHasBrightness");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamHasBrightness(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rhsGetMeasureUnit(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit rhsGetMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation rhsGetMeasureUnit");
		validateSession(session);

		RHSensorControl dev = new RHSensorControl();
		try {
			return dev.rhsGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public double barGetMeasure(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation barGetMeasure");
		validateSession(session);

		BarometerControl dev = new BarometerControl();
		try {
			return dev.barGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rndGetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> rndGetMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation rndGetMeasureStates");
		validateSession(session);

		RainSensorControl dev = new RainSensorControl();
		try {
			return dev.rndGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntMoveSouth(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LOG.info("Executing operation mntMoveSouth");
		LogUtil.info(this, "Executing operation camAbortExposure");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntMoveSouth(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanPulseGuide(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanPulseGuide(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanPulseGuide");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanPulseGuide(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schPlanDelete(java.lang.String session
	 * ,)java.lang.String id )*
	 */
	public void schPlanDelete(java.lang.String session, java.lang.String id)
			throws RtiError {
		LogUtil.info(this, "Executing operation schPlanDelete");
		System.out.println(session);
		System.out.println(id);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rttSetTargetPosition(java.lang.String
	 * session ,)java.lang.String deviceId ,)double position )*
	 */
	public void rttSetTargetPosition(java.lang.String session,
			java.lang.String deviceId, double position) throws RtiError {
		LogUtil.info(this, "Executing operation rttSetTargetPosition");
		validateSession(session);

		RotatorControl dev = new RotatorControl();
		try {
			dev.rttSetTargetPosition(deviceId, position);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.util.List<eu.gloria.rt.entity.device.ImageFormat> camGetOneShotModeImageFormats(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LOG.info("Executing operation camGetOneShotModeImageFormats");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetOneShotModeImageFormats(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwGoHome(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void fwGoHome(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation fwGoHome");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			dev.fwGoHome(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String camGetContinueModeImagePath(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LOG.info("Executing operation camGetContinueModeImagePath");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetContinueModeImagePath(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetCameraType(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.CameraType camGetCameraType(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetCameraType");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetCameraType(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rndSetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void rndSetMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation rndSetMeasureStates");
		validateSession(session);

		RainSensorControl dev = new RainSensorControl();
		try {
			dev.rndSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetROIStartY(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LOG.info("Executing operation camSetROIStartY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetROIStartY(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHasSubframe(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHasSubframe(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHasSubframe");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasSubframe(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetZoom(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetZoom(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamGetZoom");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetZoom(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camCanAsymetricBin(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camCanAsymetricBin(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camCanAsymetricBin");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camCanAsymetricBin(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wvnGetMeasureUnit(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit wvnGetMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation wvnGetMeasureUnit");
		validateSession(session);

		WeatherVaneControl dev = new WeatherVaneControl();
		try {
			return dev.wvnGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean camGetAutoGain(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation camGetAutoGain");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetAutoGain(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wspGetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> wspGetMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation wspGetMeasureStates");
		validateSession(session);

		WindSpeedSensorControl dev = new WindSpeedSensorControl();
		try {
			return dev.wspGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String camGetOneShotModeImagePath(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LOG.info("Executing operation camGetOneShotModeImagePath");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetOneShotModeImagePath(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetContinueModeQuality(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LOG.info("Executing operation camSetContinueModeQuality");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetContinueModeQuality(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetImage(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.Image camGetImage(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetImage-1");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetImage(deviceId, ImageFormat.JPG);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focGetTemperature(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double focGetTemperature(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation focGetTemperature");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focGetTemperature(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domCanSetAltitude(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean domCanSetAltitude(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domCanSetAltitude");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domCanSetAltitude(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbGetFileURI(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String fileName )*
	 */
	public java.lang.String dbGetFileURI(java.lang.String session,
			java.lang.String deviceId, java.lang.String fileName)
			throws RtiError {
		LogUtil.info(this, "Executing operation dbGetFileURI");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbGetFileURI(deviceId, fileName);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camStopExposure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void camStopExposure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camStopExposure");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camStopExposure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetImage(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.Image scamGetImage(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamGetImage");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetImage(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wvnGetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> wvnGetMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation wvnGetMeasureStates");
		validateSession(session);

		WeatherVaneControl dev = new WeatherVaneControl();
		try {
			return dev.wvnGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetFPS(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public float camGetFPS(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetFPS");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetFPS(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camCanStopExposure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camCanStopExposure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camCanStopExposure");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camCanStopExposure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focHalt(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void focHalt(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation focHalt");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			dev.focHalt(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntPulseGuide(java.lang.String session
	 * ,)java.lang.String deviceId ,)int guideDirection ,)int duration )*
	 */
	public void mntPulseGuide(java.lang.String session,
			java.lang.String deviceId, int guideDirection, int duration)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntPulseGuide");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntPulseGuide(deviceId, guideDirection, duration);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rttGetCurrentPosition(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double rttGetCurrentPosition(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation rttGetCurrentPosition");
		validateSession(session);

		RotatorControl dev = new RotatorControl();
		try {
			return dev.rttGetCurrentPosition(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetCCDTemperature(java.lang.String
	 * session ,)java.lang.String deviceId ,)float value )*
	 */
	public void camSetCCDTemperature(java.lang.String session,
			java.lang.String deviceId, float value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetCCDTemperature");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetCCDTemperature(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetPixelSizeY(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetPixelSizeY(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetPixelSizeY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetPixelSizeY(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetCCDCurrentTemperature(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public float camGetCCDCurrentTemperature(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetCCDCurrentTemperature");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetCCDCurrentTemperature(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetBitDepth(java.lang.String session,
			java.lang.String deviceId, int bits) throws RtiError {
		LOG.info("Executing operation camSetBitDepth");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetBitDepth(deviceId, bits);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strIsAvailableOrientation(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean strIsAvailableOrientation(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation strIsAvailableOrientation");
		System.out.println(session);
		System.out.println(deviceId);
		try {
			boolean _return = true;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wspGetMeasureUnit(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit wspGetMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation wspGetMeasureUnit");
		validateSession(session);

		WindSpeedSensorControl dev = new WindSpeedSensorControl();
		try {
			return dev.wspGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwSelectFilterKind(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String kind )*
	 */
	public void fwSelectFilterKind(java.lang.String session,
			java.lang.String deviceId, java.lang.String kind) throws RtiError {
		LogUtil.info(this, "Executing operation fwSelectFilterKind");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			dev.fwSelectFilterKind(deviceId, kind);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focIsTempCompAvailable(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean focIsTempCompAvailable(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation focIsTempCompAvailable");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focIsTempCompAvailable(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetContrast(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long camGetContrast(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetContrast");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetContrast(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetExposureTime(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double scamGetExposureTime(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetExposureTime");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetExposureTime(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wvnGetAbosluteDegrees(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double wvnGetAbosluteDegrees(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation wvnGetAbosluteDegrees");
		validateSession(session);

		WeatherVaneControl dev = new WeatherVaneControl();
		try {
			return dev.wvnGetAbosluteDegrees(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strGetDistanceMeasureUnit(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit strGetDistanceMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation strGetDistanceMeasureUnit");
		validateSession(session);

		StormSensorControl dev = new StormSensorControl();
		try {
			return dev.strGetDistanceMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void focSetTempComp(java.lang.String session,
			java.lang.String deviceId, boolean trackingMode) throws RtiError {
		LOG.info("Executing operation focSetTempComp");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			dev.focSetTempComp(deviceId, trackingMode);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domGetAzimuth(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double domGetAzimuth(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domGetAzimuth");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domGetAzimuth(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#devIsConnected(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean devIsConnected(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation devIsConnected");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devIsConnected(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbGetFileSystemInfo(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.DbFileSystemInfo dbGetFileSystemInfo(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation dbGetFileSystemInfo");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbGetFileSystemInfo(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domMoveAltitude(java.lang.String session
	 * ,)java.lang.String deviceId ,)double altitude )*
	 */
	public void domMoveAltitude(java.lang.String session,
			java.lang.String deviceId, double altitude) throws RtiError {
		LogUtil.info(this, "Executing operation domMoveAltitude");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domMoveAltitude(deviceId, altitude);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wvnSetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void wvnSetMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation wvnSetMeasureStates");
		validateSession(session);

		WeatherVaneControl dev = new WeatherVaneControl();
		try {
			dev.wvnSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.gloria.rti.GloriaRti#devUpdateDevicePropertyAsync(java.lang.String
	 * session ,)java.lang.String deviceId ,)java.lang.String name
	 * ,)java.util.List<java.lang.String> value )*
	 */
	public boolean devUpdateDevicePropertyAsync(java.lang.String session,
			java.lang.String deviceId, java.lang.String name,
			java.util.List<java.lang.String> value) throws RtiError {
		LogUtil.info(this, "Executing operation devUpdateDevicePropertyAsync");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devUpdateDevicePropertyAsync(deviceId, name, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public int fwGetPositionNumber(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation fwGetPositionNumber");
        validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwGetPositionNumber(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domCanSetAzimuth(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean domCanSetAzimuth(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domCanSetAzimuth");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domCanSetAzimuth(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	

	public eu.gloria.rt.entity.device.DbFileInfo dbGetFileInfo(
			java.lang.String session, java.lang.String deviceId,
			java.lang.String folder, java.lang.String filename) throws RtiError {
		LOG.info("Executing operation dbGetFileInfo");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbGetFileInfo(deviceId, folder, filename);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetContrast(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void camSetContrast(java.lang.String session,
			java.lang.String deviceId, long value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetContrast");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetContrast(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetDigitilizingMode(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.CameraDigitizingMode camGetDigitilizingMode(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetDigitilizingMode");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetDigitilizingMode(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schTmplPlanUpdate(java.lang.String session
	 * ,)java.lang.String id ,)java.lang.String xml ,)java.lang.String
	 * description )*
	 */
	public void schTmplPlanUpdate(java.lang.String session,
			java.lang.String id, java.lang.String xml,
			java.lang.String description) throws RtiError {
		LogUtil.info(this, "Executing operation schTmplPlanUpdate");
		System.out.println(session);
		System.out.println(id);
		System.out.println(xml);
		System.out.println(description);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fhtGetMeasureUnit(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit fhtGetMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation fhtGetMeasureUnit");
		System.out.println(session);
		System.out.println(deviceId);
		try {
			eu.gloria.rt.entity.device.MeasureUnit _return = eu.gloria.rt.entity.device.MeasureUnit.INCH;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schPlanUpdate(java.lang.String session
	 * ,)java.lang.String id ,)java.lang.String idTmpl ,)java.lang.String
	 * xmlMapping ,)javax.xml.datatype.XMLGregorianCalendar execWindowStart
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowEnd ,)java.lang.Long
	 * execMaxTime )*
	 */
	public void schPlanUpdate(java.lang.String session, java.lang.String id,
			java.lang.String idTmpl, java.lang.String xmlMapping,
			javax.xml.datatype.XMLGregorianCalendar execWindowStart,
			javax.xml.datatype.XMLGregorianCalendar execWindowEnd,
			java.lang.Long execMaxTime) throws RtiError {
		LogUtil.info(this, "Executing operation schPlanUpdate");
		System.out.println(session);
		System.out.println(id);
		System.out.println(idTmpl);
		System.out.println(xmlMapping);
		System.out.println(execWindowStart);
		System.out.println(execWindowEnd);
		System.out.println(execMaxTime);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetAcquisitionMode(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.CameraAcquisitionMode camGetAcquisitionMode(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetAcquisitionMode");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetAcquisitionMode(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean camGetAutoExposureTime(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation camGetAutoExposureTime");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetAutoExposureTime(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwSetOffset(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.util.List<java.lang.Integer> positions
	 * )*
	 */
	public void fwSetOffset(java.lang.String session,
			java.lang.String deviceId,
			java.util.List<java.lang.Integer> positions) throws RtiError {
		LogUtil.info(this, "Executing operation fwSetOffset");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			dev.fwSetOffset(deviceId, positions);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamSetExposureTime(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void scamSetExposureTime(java.lang.String session,
			java.lang.String deviceId, double value) throws RtiError {
		LogUtil.info(this, "Executing operation scamSetExposureTime");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamSetExposureTime(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetBrightness(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long camGetBrightness(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetBrightness");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetBrightness(deviceId);		
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntSetSlewRate(java.lang.String session,
			java.lang.String deviceId, java.lang.String rate) throws RtiError {
		LOG.info("Executing operation mntSetSlewRate");
		LogUtil.info(this, "Executing operation camAbortExposure");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSetSlewRate(deviceId, rate);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetBinX(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetBinX(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetBinX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetBinX(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbRenameFile(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String currentFileName
	 * ,)java.lang.String newFilename )*
	 */
	public void dbRenameFile(java.lang.String session,
			java.lang.String deviceId, java.lang.String currentFileName,
			java.lang.String newFilename) throws RtiError {
		LogUtil.info(this, "Executing operation dbRenameFile");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			dev.dbRenameFile(deviceId, currentFileName, newFilename);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean camHasGain(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation camHasGain");
        System.out.println(session);
        System.out.println(deviceId);
        try {
            boolean _return = true;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new RtiError("rtiError...");
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetGain(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void camSetGain(java.lang.String session, java.lang.String deviceId,
			long value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetGain");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetGain(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSetTracking(java.lang.String session
	 * ,)java.lang.String deviceId ,)boolean value )*
	 */
	public void mntSetTracking(java.lang.String session,
			java.lang.String deviceId, boolean value) throws RtiError {
		LogUtil.info(this, "Executing operation mntSetTracking");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSetTracking(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean rndIsRaining(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation rndIsRaining");
		validateSession(session);

		RainSensorControl dev = new RainSensorControl();
		try {
			return dev.rndIsRaining(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetMaxBinX(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetMaxBinX(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetMaxBinX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetMaxBinX(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetTiltMax(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetTiltMax(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetTiltMax");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetTiltMax(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strGetDistanceMeasureStates(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalLong> strGetDistanceMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation strGetDistanceMeasureStates");
		validateSession(session);

		StormSensorControl dev = new StormSensorControl();
		try {
			return dev.strGetDistanceMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetROIStartX(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LOG.info("Executing operation camSetROIStartX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetROIStartX(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSetGuideRates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSetGuideRates(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSetGuideRates");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSetGuideRates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamStartExposure(java.lang.String session
	 * ,)java.lang.String deviceId ,)boolean light )*
	 */
	public void scamStartExposure(java.lang.String session,
			java.lang.String deviceId, boolean light) throws RtiError {
		LogUtil.info(this, "Executing operation scamStartExposure");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamStartExposure(deviceId, light);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strGetDegrees(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double strGetDegrees(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation strGetDegrees");
		validateSession(session);

        StormSensorControl dev = new StormSensorControl();
    	try {
    		return dev.strGetDegrees(deviceId);
    	} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.gloria.rti.GloriaRti#mntGetDeclinationRateRightAscension(java.lang
	 * .String session ,)java.lang.String deviceId )*
	 */
	public double mntGetDeclinationRateRightAscension(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this,
				"Executing operation mntGetDeclinationRateRightAscension");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetDeclinationRateRightAscension(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domGetNumberElement(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int domGetNumberElement(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domGetNumberElement");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domGetNumberElement(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwGetSpeedSwitching(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int fwGetSpeedSwitching(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation fwGetSpeedSwitching");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwGetSpeedSwitching(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rhsSetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void rhsSetMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation rhsSetMeasureStates");
		validateSession(session);

		RHSensorControl dev = new RHSensorControl();
		try {
			dev.rhsSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSetUtcClock(java.lang.String session
	 * ,)java.lang.String deviceId ,)javax.xml.datatype.XMLGregorianCalendar
	 * date )*
	 */
	public void mntSetUtcClock(java.lang.String session,
			java.lang.String deviceId,
			javax.xml.datatype.XMLGregorianCalendar date) throws RtiError {
		LogUtil.info(this, "Executing operation mntSetUtcClock");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSetUtcClock(deviceId, date.toGregorianCalendar().getTime());
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamSetPanRotation(java.lang.String session
	 * ,)java.lang.String deviceId ,)int value )*
	 */
	public void scamSetPanRotation(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LogUtil.info(this, "Executing operation scamSetPanRotation");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamSetPanRotation(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.gloria.rti.GloriaRti#mntGetTrackingDeclinationRate(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double mntGetTrackingDeclinationRate(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetTrackingDeclinationRate");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetTrackingDeclinationRate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetUtcClock(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public javax.xml.datatype.XMLGregorianCalendar mntGetUtcClock(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntGetUtcClock");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			Date date = dev.mntGetUtcClock(deviceId);
			GregorianCalendar gc = new GregorianCalendar();
			gc.setTimeInMillis(date.getTime());
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gc);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSlewToCoordinates(java.lang.String
	 * session ,)java.lang.String deviceId ,)double ascension ,)double
	 * declination )*
	 */
	public void mntSlewToCoordinates(java.lang.String session,
			java.lang.String deviceId, double ascension, double declination)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntSlewToCoordinates");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSlewToCoordinates(deviceId, ascension, declination);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbGetMetadata(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String fileName )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.DbFileMetadata> dbGetMetadata(
			java.lang.String session, java.lang.String deviceId,
			java.lang.String fileName) throws RtiError {
		LogUtil.info(this, "Executing operation dbGetMetadata");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbGetMetadata(deviceId, fileName);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> tempGetMeasureStates(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation tempGetMeasureStates");
		validateSession(session);

		TemperatureSensorControl dev = new TemperatureSensorControl();
		try {
			return dev.tempGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamAbortExposure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void scamAbortExposure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamAbortExposure");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamAbortExposure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetFullWellCapacity(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double camGetFullWellCapacity(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetFullWellCapacity");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetFullWellCapacity(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public eu.gloria.rt.entity.device.MeasureUnit tempGetMeasureUnit(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation tempGetMeasureUnit");
		validateSession(session);

		TemperatureSensorControl dev = new TemperatureSensorControl();
		try {
			return dev.tempGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetBinX(java.lang.String session
	 * ,)java.lang.String deviceId ,)int value )*
	 */
	public void camSetBinX(java.lang.String session, java.lang.String deviceId,
			int value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetBinX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetBinX(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetTrackingAscensionRate(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double mntGetTrackingAscensionRate(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetTrackingAscensionRate");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetTrackingAscensionRate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwIsAtHome(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean fwIsAtHome(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation fwIsAtHome");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwIsAtHome(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fhtGetMeasure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double fhtGetMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation fhtGetMeasure");
		System.out.println(session);
		System.out.println(deviceId);
		try {
			double _return = 0.9204857450039301;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHasBrightness(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHasBrightness(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHasBrightness");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasBrightness(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.gloria.rti.GloriaRti#strGetOrientationMeasureStates(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> strGetOrientationMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation strGetOrientationMeasureStates");
		validateSession(session);

        StormSensorControl dev = new StormSensorControl();
    	try {
    		return dev.strGetOrientationMeasureStates(deviceId);
    	} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetVideoStreamingURL(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public java.lang.String scamGetVideoStreamingURL(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetVideoStreamingURL");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetVideoStreamingURL(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntUnpark(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void mntUnpark(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntUnpark");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntUnpark(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String camStartContinueMode(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation camStartContinueMode");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camStartContinueMode(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camCanSetCCDTemperature(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean camCanSetCCDTemperature(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camCanSetCCDTemperature");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camCanSetCCDTemperature(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#devConnect(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void devConnect(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation devConnect");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			dev.devConnect(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetDigitizingMode(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.CameraDigitizingMode scamGetDigitizingMode(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamGetDigitizingMode");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetDigitizingMode(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetExposureTime(java.lang.String session
	 * ,)java.lang.String deviceId ,)double value )*
	 */
	public void camSetExposureTime(java.lang.String session,
			java.lang.String deviceId, double value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetExposureTime");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetExposureTime(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
		
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbWriteFile(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String fileName
	 * ,)java.util.List<java.lang.Byte> content
	 * ,)java.util.List<eu.gloria.rt.entity.device.DbFileMetadata> metadata )*
	 */
	public void dbWriteFile(java.lang.String session,
			java.lang.String deviceId, java.lang.String fileName,
			java.util.List<java.lang.Byte> content,
			java.util.List<eu.gloria.rt.entity.device.DbFileMetadata> metadata)
			throws RtiError {
		LogUtil.info(this, "Executing operation dbWriteFile");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			dev.dbWriteFile(deviceId, fileName, content, metadata);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#cldSetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void cldSetMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation cldSetMeasureStates");
		validateSession(session);

		CloudDetectorSensorControl dev = new CloudDetectorSensorControl();
		try {
			dev.cldSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetSiderealDate(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double mntGetSiderealDate(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetSiderealDate");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetSiderealDate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbGetFileChunk(java.lang.String session
	 * ,)java.lang.String deviceId ,)java.lang.String fileName ,)long offset
	 * ,)long size )*
	 */
	public java.util.List<java.lang.Byte> dbGetFileChunk(
			java.lang.String session, java.lang.String deviceId,
			java.lang.String fileName, long offset, long size) throws RtiError {
		LogUtil.info(this, "Executing operation dbGetFileChunk");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbGetFileChunk(deviceId, fileName, offset, size);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamIsZoomSupported(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean scamIsZoomSupported(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamIsZoomSupported");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamIsZoomSupported(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String scamGetImageURL(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation scamGetImageURL");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetImageURL(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetXsize(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetXsize(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetXsize");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetXsize(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetALTParkPos(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double mntGetALTParkPos(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetALTParkPos");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetALTParkPos(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetTargetDeclination(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double mntGetTargetDeclination(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetTargetDeclination");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetTargetDeclination(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public eu.gloria.rt.entity.device.Device devGetDevice(
			java.lang.String session, java.lang.String deviceId,
			boolean allProperties) throws RtiError {
		LOG.info("Executing operation devGetDevice");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devGetDevice(deviceId, allProperties);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSlewAzAsync(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSlewAzAsync(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSlewAzAsync");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSlewAzAsync(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwGetFilterSize(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public float fwGetFilterSize(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation fwGetFilterSize");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwGetFilterSize(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSetTracking(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSetTracking(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSetTracking");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSetTracking(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSlewAltAz(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSlewAltAz(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSlewAltAz");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSlewAltAz(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHashGain(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHashGain(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHashGain");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasGain(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamStopExposure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void scamStopExposure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamStopExposure");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamStopExposure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fhtSetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void fhtSetMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation fhtSetMeasureStates");
		System.out.println(session);
		System.out.println(deviceId);
		System.out.println(states);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntStopSlewAxis(java.lang.String session
	 * ,)java.lang.String deviceId ,)int axisType )*
	 */
	public void mntStopSlewAxis(java.lang.String session,
			java.lang.String deviceId, int axisType) throws RtiError {
		LogUtil.info(this, "Executing operation mntStopSlewAxis");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntStopSlew(deviceId, axisType);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camIsCoolerOn(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camIsCoolerOn(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camIsCoolerOn");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camIsCoolerOn(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public eu.gloria.rt.entity.device.DeviceProperty devGetDeviceProperty(java.lang.String session,java.lang.String deviceId,java.lang.String name) throws RtiError    { 
        LOG.info("Executing operation devGetDeviceProperty");
        LogUtil.info(this, "Executing operation devGetDeviceProperties");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devGetDeviceProperty(deviceId, name);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetTrackingRate(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.TrackingRateType mntGetTrackingRate(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetTrackingRate");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetTrackingRate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dwrGetChannelsNumber(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public int dwrGetChannelsNumber(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation dwrGetChannelsNumber");
		validateSession(session);

		DewRemoverControl dev = new DewRemoverControl();
		try {
			return dev.dwrGetChannelsNumber(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntPark(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void mntPark(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntPark");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntPark(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHeatSinkTemperature(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double camHeatSinkTemperature(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHeatSinkTemperature");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHeatSinkTemperature(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetPointingModel(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MountPointingModel mntGetPointingModel(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntGetPointingModel");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetPointingModel(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String camGetImageURLProperFormat(java.lang.String session,java.lang.String deviceId,java.lang.String uid,eu.gloria.rt.entity.device.ImageFormat format) throws RtiError    { 
		LOG.info("Executing operation camGetImageURLProperFormat");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetImageURL(deviceId, uid, format);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamSetTiltRotation(java.lang.String session
	 * ,)java.lang.String deviceId ,)int value )*
	 */
	public void scamSetTiltRotation(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LogUtil.info(this, "Executing operation scamSetTiltRotation");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamSetTiltRotation(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wspGetMeasure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double wspGetMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation wspGetMeasure");
		validateSession(session);

		WindSpeedSensorControl dev = new WindSpeedSensorControl();
		try {
			return dev.wspGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#login(java.lang.String user
	 * ,)java.lang.String pw ,)eu.gloria.rti.SessionType sessionType )*
	 */
	public java.lang.String login(java.lang.String user, java.lang.String pw,
			eu.gloria.rti.SessionType sessionType) throws RtiError {
		LogUtil.info(this, "WS-LOGIN:: BEGIN");
		System.out.println(user);
		System.out.println(pw);
		try {

			RtiSession rtiSession;
			if (sessionType == sessionType.TOKEN) { // Token session

				rtiSession = RtiSessionFactory.getSession(wsContext,
						RtiSession.TOKEN_FOR_CREATING_NEW_SESSION);

			} else { // Cookie session

				rtiSession = RtiSessionFactory.getSession(wsContext);
			}

			String sessionUUID = rtiSession.rtiLogin(user, pw);

			LogUtil.info(this, "LOGING::[user=" + user + ", session="
					+ sessionUUID + "]");

			return sessionUUID;

		} catch (InvalidSessionException authEx) {
			LOG.severe("WS-LOGIN::[user=" + user
					+ "]. InvalidSessionException. " + authEx.getMessage());
			ErrorDetail detail = new ErrorDetail();
			detail.setCode(authEx.getErrorCode());
			detail.setDesc(authEx.getMessage());
			detail.setType(ErrorType.LOGIN_IMPOSSIBLE_AUTHENTICATE);
			RtiError error = new RtiError(authEx.getMessage(), detail);
			throw error;
		} catch (AuthenticationException authEx) {
			LOG.severe("WS-LOGIN::[user=" + user
					+ "]. AuthenticationException. " + authEx.getMessage());
			ErrorDetail detail = new ErrorDetail();
			detail.setCode(authEx.getErrorCode());
			detail.setDesc(authEx.getMessage());
			detail.setType(ErrorType.LOGIN_IMPOSSIBLE_AUTHENTICATE);
			RtiError error = new RtiError(authEx.getMessage(), detail);
			throw error;
		} catch (InvalidUsrPwException invalidEx) {
			LOG.severe("WS-LOGIN::[user=" + user + "]. InvalidUsrPwException. "
					+ invalidEx.getMessage());
			ErrorDetail detail = new ErrorDetail();
			detail.setCode(invalidEx.getErrorCode());
			detail.setDesc(invalidEx.getMessage());
			detail.setType(ErrorType.LOGIN_INVALID_USER_PASSWORD);
			RtiError error = new RtiError(invalidEx.getMessage(), detail);
			throw error;
		} finally {
			LogUtil.info(this, "WS-LOGIN:: END");
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetYSize(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetYSize(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetYSize");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetYSize(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetMaxAdu(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long camGetMaxAdu(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetMaxAdu");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetMaxAdu(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean camImageReady(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation camImageReady");
        System.out.println(session);
        System.out.println(deviceId);
        try {
            boolean _return = false;
            return _return;
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new RtiError("rtiError...");
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamAcquisitionMode(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.CameraAcquisitionMode scamAcquisitionMode(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamAcquisitionMode");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamAcquisitionMode(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public double rndGetMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation rndGetMeasure");
		validateSession(session);

		RainSensorControl dev = new RainSensorControl();
		try {
			return dev.rndGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetPanMin(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetPanMin(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamGetPanMin");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetPanMin(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String camGetImageURL(java.lang.String session,
			java.lang.String deviceId, java.lang.String uid) throws RtiError {
		LOG.info("Executing operation camGetImageURL");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetImageURL(deviceId, uid, ImageFormat.JPG);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camStopContinueMode(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation camStopContinueMode");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camStopContinueMode(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetAZParkPos(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double mntGetAZParkPos(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetAZParkPos");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetAZParkPos(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetOneShotModeQuality(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LOG.info("Executing operation camSetOneShotModeQuality");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetOneShotModeQuality(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetLastExposureDuration(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double camGetLastExposureDuration(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetLastExposureDuration");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetLastExposureDuration(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#cldGetMeasureUnit(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.MeasureUnit cldGetMeasureUnit(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation cldGetMeasureUnit");
		validateSession(session);

		CloudDetectorSensorControl dev = new CloudDetectorSensorControl();
		try {
			return dev.cldGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dwrSetCycleThreshold(java.lang.String
	 * session ,)java.lang.String deviceId ,)int channel ,)int cycle )*
	 */
	public void dwrSetCycleThreshold(java.lang.String session,
			java.lang.String deviceId, int channel, int cycle) throws RtiError {
		LogUtil.info(this, "Executing operation dwrSetCycleThreshold");
		validateSession(session);

		DewRemoverControl dev = new DewRemoverControl();
		try {
			dev.dwrSetCycleThreshold(deviceId, channel, cycle);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSetPark(java.lang.String session
	 * ,)java.lang.String deviceId ,)double ascension ,)double declination )*
	 */
	public void mntSetPark(java.lang.String session, java.lang.String deviceId,
			double ascension, double declination) throws RtiError {
		LogUtil.info(this, "Executing operation mntSetPark");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSetPark(deviceId, ascension, declination);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public int camGetOneShotModeQuality(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation camGetOneShotModeQuality");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetOneShotModeQuality(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHasConstrast(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHasConstrast(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHasConstrast");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasConstrast(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntIsParked(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntIsParked(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntIsParked");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntIsParked(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domIsAtHome(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean domIsAtHome(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domIsAtHome");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domIsAtHome(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetROINumX(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetROINumX(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetROINumX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetROINumX(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domMoveAzimuth(java.lang.String session
	 * ,)java.lang.String deviceId ,)double azimuth )*
	 */
	public void domMoveAzimuth(java.lang.String session,
			java.lang.String deviceId, double azimuth) throws RtiError {
		LogUtil.info(this, "Executing operation domMoveAzimuth");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domMoveAzimuth(deviceId, azimuth);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetBitDepth(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetBitDepth(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetBitDepth");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetBitDepth(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public int camGetContinueModeQuality(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation camGetContinueModeQuality");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetContinueModeQuality(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetMaxBinY(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetMaxBinY(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetMaxBinY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetMaxBinY(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetCCDTemperature(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public float camGetCCDTemperature(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetCCDTemperature");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetCCDTemperature(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetZoomMax(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetZoomMax(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetZoomMax");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetZoomMax(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntMoveEast(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LOG.info("Executing operation mntMoveEast");
		LogUtil.info(this, "Executing operation camAbortExposure");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntMoveEast(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domClose(java.lang.String session
	 * ,)java.lang.String deviceId ,)int element )*
	 */
	public void domClose(java.lang.String session, java.lang.String deviceId,
			int element) throws RtiError {
		LogUtil.info(this, "Executing operation domClose");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domClose(deviceId, element);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void tempSetMeasureStates(java.lang.String session,java.lang.String deviceId,java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states) throws RtiError    { 
		LogUtil.info(this, "Executing operation tempSetMeasureStates");
		validateSession(session);

		TemperatureSensorControl dev = new TemperatureSensorControl();
		try {
			dev.tempSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schTmplPlanCreate(java.lang.String session
	 * ,)java.lang.String id ,)java.lang.String xml ,)java.lang.String
	 * description )*
	 */
	public void schTmplPlanCreate(java.lang.String session,
			java.lang.String id, java.lang.String xml,
			java.lang.String description) throws RtiError {
		LogUtil.info(this, "Executing operation schTmplPlanCreate");
		System.out.println(session);
		System.out.println(id);
		System.out.println(xml);
		System.out.println(description);
		try {
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.gloria.rti.GloriaRti#mntCanSetTrackingRate(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSetTrackingRate(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this,
				"Executing operation mntCanSetTrackingRate");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSetTrackingRate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wvnGetMeasure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double wvnGetMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation wvnGetMeasure");
		validateSession(session);

		WeatherVaneControl dev = new WeatherVaneControl();
		try {
			return dev.wvnGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntAxisRate(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.AxisRateType> mntAxisRate(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntAxisRate");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntAxisRate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focMove(java.lang.String session
	 * ,)java.lang.String deviceId ,)long position )*
	 */
	public void focMove(java.lang.String session, java.lang.String deviceId,
			long position) throws RtiError {
		LogUtil.info(this, "Executing operation focMove");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			dev.focMove(deviceId, position);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetPanMax(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetPanMax(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamGetPanMax");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetPanMax(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetROINumX(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LOG.info("Executing operation camSetROINumX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetROINumX(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.util.List<eu.gloria.rt.entity.device.Device> devGetDevices(
			java.lang.String session, boolean allProperties) throws RtiError {
		LOG.info("Executing operation devGetDevices");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devGetDevices(allProperties);
			
			 
			//-----------------TO REMOVE------(imports and this code)---------------------------------
			
//			RunTimeContext context = new RunTimeContext();
//			Target target = new Target("1", context);
//			target.setDeviceId("B2");
//			target.setExceededExecTime(4000);
//			target.setRa(90);
//			target.setDec(20);
//			target.execute();
//			Expose exp = new Expose("1", context);
//			exp.setDeviceId("andor");
//			exp.setExceededExecTime(120000);
//			exp.setExposureTime(4);
//			exp.execute();
//			
//			return null;
			//---------------------------------------------------------
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetROIStartX(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetROIStartX(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetROIStartX");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetROIStartX(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean devIsBlocked(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation devIsBlocked");
        validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devIsBlocked(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetElectronsPerADU(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double camGetElectronsPerADU(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetElectronsPerADU");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetElectronsPerADU(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntTrackingRates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.TrackingRateType> mntTrackingRates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntTrackingRates");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntTrackingRates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public double mntGetPosAxis1(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation mntGetPosAxis1");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetPosAxis1(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSlewToCoordinatesAsync(java.lang.String
	 * session ,)java.lang.String deviceId ,)double ascension ,)double
	 * declination )*
	 */
	public void mntSlewToCoordinatesAsync(java.lang.String session,
			java.lang.String deviceId, double ascension, double declination)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntSlewToCoordinatesAsync");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSlewToCoordinatesAsync(deviceId, ascension, declination);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String camStartExposure(java.lang.String session,
			java.lang.String deviceId, boolean light) throws RtiError {
		LOG.info("Executing operation camStartExposure");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camStartExposure(deviceId, light);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camHasExposureTime(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camHasExposureTime(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camHasExposureTime");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camHasExposureTime(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwGetFilterKind(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.lang.String fwGetFilterKind(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation fwGetFilterKind");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwGetFilterKind(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * eu.gloria.rti.GloriaRti#strSetOrientationMeasureStates(java.lang.String
	 * session ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void strSetOrientationMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation strSetOrientationMeasureStates");
		validateSession(session);

        StormSensorControl dev = new StormSensorControl();
    	try {
    		dev.strSetOrientationMeasureStates(deviceId, states);
    	} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetTracking(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntGetTracking(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetTracking");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetTracking(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focGetMaxStep(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long focGetMaxStep(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation focGetMaxStep");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focGetMaxStep(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSlewCoordinates(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSlewCoordinates(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSlewCoordinates");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSlewCoordinates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetTiltRotation(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetTiltRotation(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetTiltRotation");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetTiltRotation(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntIsSlewing(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntIsSlewing(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntIsSlewing");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntIsSlewing(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetExposureTime(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double camGetExposureTime(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetExposureTime");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetExposureTime(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntSetTrackingRate(java.lang.String session,java.lang.String deviceId,eu.gloria.rt.entity.device.TrackingRateType rate) throws RtiError    { 
        LOG.info("Executing operation mntSetTrackingRate");
        validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSetTrackingRate(deviceId, rate);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	public void camSetAutoExposureTime(java.lang.String session,
			java.lang.String deviceId, boolean value) throws RtiError {
		LOG.info("Executing operation camSetAutoExposureTime");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetAutoExposureTime(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#devGetConfiguration(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.lang.String devGetConfiguration(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation devGetConfiguration");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devGetConfiguration(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strGetAbosoluteDegrees(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double strGetAbosoluteDegrees(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation strGetAbosoluteDegrees");
		validateSession(session);

        StormSensorControl dev = new StormSensorControl();
    	try {
    		return dev.strGetAbosoluteDegrees(deviceId);
    	} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camCanGetCoolerPower(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean camCanGetCoolerPower(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camCanGetCoolerPower");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camCanGetCoolerPower(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamHasContrast(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean scamHasContrast(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamHasContrast");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamHasContrast(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetFPS(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public float scamGetFPS(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation scamGetFPS");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetFPS(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void domSlewObject(java.lang.String session,
			java.lang.String deviceId, java.lang.String object) throws RtiError {
		LOG.info("Executing operation domSlewObject");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domSlewObject(deviceId, object);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focGetMaxIncrement(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long focGetMaxIncrement(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation focGetMaxIncrement");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focGetMaxIncrement(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetContrast(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long scamGetContrast(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetContrast");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetContrast(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetGain(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long camGetGain(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetGain");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetGain(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fwSelectFilterPosition(java.lang.String
	 * session ,)java.lang.String deviceId ,)int position )*
	 */
	public void fwSelectFilterPosition(java.lang.String session,
			java.lang.String deviceId, int position) throws RtiError {
		LogUtil.info(this, "Executing operation fwSelectFilterPosition");
		validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			dev.fwSelectFilterPosition(deviceId, position);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSlewToAltAzAsync(java.lang.String session
	 * ,)java.lang.String deviceId ,)double azimuth ,)double altitude )*
	 */
	public void mntSlewToAltAzAsync(java.lang.String session,
			java.lang.String deviceId, double azimuth, double altitude)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntSlewToAltAzAsync");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSlewToAltAzAsync(deviceId, azimuth, altitude);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	
	public java.util.List<java.lang.Byte> dbGetFileContent(
			java.lang.String session, java.lang.String deviceId,
			java.lang.String folder, java.lang.String filename) throws RtiError {
		LOG.info("Executing operation dbGetFileContent");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbGetFileContent(deviceId, folder, filename);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean mntCanSlewObject(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation mntCanSlewObject");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSlewObject(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domIsAtPark(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean domIsAtPark(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domIsAtPark");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domIsAtPark(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetBrightness(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void camSetBrightness(java.lang.String session,
			java.lang.String deviceId, long value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetBrightness");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetBrightness(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domCanSetPark(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean domCanSetPark(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domCanSetPark");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domCanSetPark(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetROIStartY(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetROIStartY(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetROIStartY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetROIStartY(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	
	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strGetDistanceMeasure(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public long strGetDistanceMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation strGetDistanceMeasure");
		validateSession(session);

        StormSensorControl dev = new StormSensorControl();
    	try {
    		return dev.strGetDistanceMeasure(deviceId);
    	} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.util.List<eu.gloria.rt.entity.device.ImageFormat> camGetContinueModeImageFormats(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LOG.info("Executing operation camGetContinueModeImageFormats");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetContinueModeImageFormats(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#fhtGetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> fhtGetMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation fhtGetMeasureStates");
		System.out.println(session);
		System.out.println(deviceId);
		try {
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> _return = new java.util.ArrayList<eu.gloria.rt.entity.device.SensorStateIntervalDouble>();
			eu.gloria.rt.entity.device.SensorStateIntervalDouble _returnVal1 = new eu.gloria.rt.entity.device.SensorStateIntervalDouble();
			_returnVal1.setBeginValue(0.4119573585105756);
			_returnVal1.setBeginClosed(false);
			_returnVal1.setEndValue(0.030525787274590765);
			_returnVal1.setEndClosed(false);
			_returnVal1.setAlarm(true);
			_returnVal1.setAlarmName("AlarmName1163492514");
			_return.add(_returnVal1);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camIsPulseGuiding(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean camIsPulseGuiding(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camIsPulseGuiding");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camIsPulseGuiding(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSlewCoordinatesAsync(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSlewCoordinatesAsync(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSlewCoordinatesAsync");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSlewCoordinatesAsync(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetPanRotation(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int scamGetPanRotation(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetPanRotation");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetPanRotation(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGoHome(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void mntGoHome(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntGoHome");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntGoHome(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntMoveWest(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LOG.info("Executing operation mntMoveWest");
		LogUtil.info(this, "Executing operation camAbortExposure");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntMoveWest(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamSetBrightness(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void scamSetBrightness(java.lang.String session,
			java.lang.String deviceId, long value) throws RtiError {
		LogUtil.info(this, "Executing operation scamSetBrightness");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamSetBrightness(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#schPlanGet(java.lang.String session
	 * ,)java.lang.String id ,)java.lang.String user
	 * ,)eu.gloria.rt.entity.scheduler.PlanState state
	 * ,)javax.xml.datatype.XMLGregorianCalendar creationFrom
	 * ,)javax.xml.datatype.XMLGregorianCalendar creationTo
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowStartFrom
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowStartTo
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowEndFrom
	 * ,)javax.xml.datatype.XMLGregorianCalendar execWindowEndTo
	 * ,)java.lang.Long execMaxFrom ,)java.lang.Long execMaxTo )*
	 */
	public java.util.List<eu.gloria.rt.entity.scheduler.Plan> schPlanGet(
			java.lang.String session, java.lang.String id,
			java.lang.String user,
			eu.gloria.rt.entity.scheduler.PlanState state,
			javax.xml.datatype.XMLGregorianCalendar creationFrom,
			javax.xml.datatype.XMLGregorianCalendar creationTo,
			javax.xml.datatype.XMLGregorianCalendar execWindowStartFrom,
			javax.xml.datatype.XMLGregorianCalendar execWindowStartTo,
			javax.xml.datatype.XMLGregorianCalendar execWindowEndFrom,
			javax.xml.datatype.XMLGregorianCalendar execWindowEndTo,
			java.lang.Long execMaxFrom, java.lang.Long execMaxTo)
			throws RtiError {
		LogUtil.info(this, "Executing operation schPlanGet");
		System.out.println(session);
		System.out.println(id);
		System.out.println(user);
		System.out.println(state);
		System.out.println(creationFrom);
		System.out.println(creationTo);
		System.out.println(execWindowStartFrom);
		System.out.println(execWindowStartTo);
		System.out.println(execWindowEndFrom);
		System.out.println(execWindowEndTo);
		System.out.println(execMaxFrom);
		System.out.println(execMaxTo);
		try {
			java.util.List<eu.gloria.rt.entity.scheduler.Plan> _return = new java.util.ArrayList<eu.gloria.rt.entity.scheduler.Plan>();
			eu.gloria.rt.entity.scheduler.Plan _returnVal1 = new eu.gloria.rt.entity.scheduler.Plan();
			_returnVal1.setId("Id-211339715");
			_returnVal1.setUser("User-292760006");
			_returnVal1.setTemplateId("TemplateId-1686431629");
			eu.gloria.rt.entity.scheduler.PlanState _returnVal1State = eu.gloria.rt.entity.scheduler.PlanState.EXCEEDED_TIME;
			_returnVal1.setState(_returnVal1State);
			_returnVal1.setCreationDate(javax.xml.datatype.DatatypeFactory
					.newInstance().newXMLGregorianCalendar(
							"2012-05-25T10:29:19.703+02:00"));
			_returnVal1.setErrorDevId("ErrorDevId-2070711031");
			_returnVal1.setErrorCode(new java.math.BigInteger(
					"55438454784535787757880023928746148483"));
			_returnVal1.setErrorDesc("ErrorDesc438983549");
			_returnVal1.setExecWindowStart(javax.xml.datatype.DatatypeFactory
					.newInstance().newXMLGregorianCalendar(
							"2012-05-25T10:29:19.703+02:00"));
			_returnVal1.setExecWindowEnd(javax.xml.datatype.DatatypeFactory
					.newInstance().newXMLGregorianCalendar(
							"2012-05-25T10:29:19.704+02:00"));
			_returnVal1.setExecMaxTime(-8320555578251142783l);
			_returnVal1.setRtStart(javax.xml.datatype.DatatypeFactory
					.newInstance().newXMLGregorianCalendar(
							"2012-05-25T10:29:19.704+02:00"));
			_returnVal1.setRtSEnd(javax.xml.datatype.DatatypeFactory
					.newInstance().newXMLGregorianCalendar(
							"2012-05-25T10:29:19.705+02:00"));
			_return.add(_returnVal1);
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
		// throw new RtiError("rtiError...");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamIsPTSupported(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean scamIsPTSupported(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamIsPTSupported");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamIsPTSupported(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetBinY(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public int camGetBinY(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetBinY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetBinY(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#focIsAbsolute(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean focIsAbsolute(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation focIsAbsolute");
		validateSession(session);

		FocuserControl dev = new FocuserControl();
		try {
			return dev.focIsAbsolute(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camCanControlTemperature(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean camCanControlTemperature(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camCanControlTemperature");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camCanControlTemperature(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbIsAvailableURIAccess(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean dbIsAvailableURIAccess(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation dbIsAvailableURIAccess");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbIsAvailableURIAccess(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntCanSetPark(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntCanSetPark(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntCanSetPark");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntCanSetPark(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public eu.gloria.rt.entity.device.MeasureUnit barGetMeasureUnit(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation barGetMeasureUnit");
		validateSession(session);

		BarometerControl dev = new BarometerControl();
		try {
			return dev.barGetMeasureUnit(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camPulseGuide(java.lang.String session
	 * ,)java.lang.String deviceId ,)int direction ,)long duration )*
	 */
	public void camPulseGuide(java.lang.String session,
			java.lang.String deviceId, int direction, long duration)
			throws RtiError {
		LogUtil.info(this, "Executing operation camPulseGuide");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camPulseGuide(deviceId, direction, duration);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetCoolerOn(java.lang.String session
	 * ,)java.lang.String deviceId ,)boolean value )*
	 */
	public void camSetCoolerOn(java.lang.String session,
			java.lang.String deviceId, boolean value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetCoolerOn");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetCoolerOn(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamGetBrightness(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public long scamGetBrightness(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamGetBrightness");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamGetBrightness(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camSetBinY(java.lang.String session
	 * ,)java.lang.String deviceId ,)int value )*
	 */
	public void camSetBinY(java.lang.String session, java.lang.String deviceId,
			int value) throws RtiError {
		LogUtil.info(this, "Executing operation camSetBinY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetBinY(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public double mntGetPosAxis3(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation mntGetPosAxis3");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetPosAxis3(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void camSetROINumY(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LOG.info("Executing operation camSetROINumY");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camSetROINumY(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetCoolerPower(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public float camGetCoolerPower(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetCoolerPower");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetCoolerPower(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rhsGetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> rhsGetMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation rhsGetMeasureStates");
		validateSession(session);

		RHSensorControl dev = new RHSensorControl();
		try {
			return dev.rhsGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntGetTargetRightAscension(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public double mntGetTargetRightAscension(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntGetTargetRightAscension");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetTargetRightAscension(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#logout(java.lang.String session )*
	 */
	public void logout(java.lang.String session) throws RtiError {
		String user = RtiSession.SESSION_UNKNOWN_USER;
		try {
			LogUtil.info(this, "WS-LOGOUT:: BEGIN");
			RtiSession rtiSession = RtiSessionFactory.getSession(wsContext,
					session);
			user = rtiSession.rtiGetUser();
			rtiSession.invalidate();
		} catch (Exception ex) {
			LOG.severe("WS-LOGOUT::[user=" + user + "]. " + ex.getMessage());
		} finally {
			LogUtil.info(this, "WS-LOGOUT:: END");
		}
	}

	public double mntGetPosAxis2(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation mntGetPosAxis2");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetPosAxis2(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetLastError(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.lang.String camGetLastError(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camGetLastError");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetLastError(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntIsAtHome(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean mntIsAtHome(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation mntIsAtHome");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntIsAtHome(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public boolean domGetTracking(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LOG.info("Executing operation domGetTracking");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domGetTracking(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domGetAltitude(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double domGetAltitude(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation domGetAltitude");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			return dev.domGetAltitude(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#cldGetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> cldGetMeasureStates(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation cldGetMeasureStates");
		validateSession(session);

		CloudDetectorSensorControl dev = new CloudDetectorSensorControl();
		try {
			return dev.cldGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.util.List<java.lang.String> fwGetFilterList(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation fwGetFilterList");
        validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwGetFilterList(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#rhsGetMeasure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public double rhsGetMeasure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation rhsGetMeasure");
		validateSession(session);

		RHSensorControl dev = new RHSensorControl();
		try {
			return dev.rhsGetMeasure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camAbortExposure(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void camAbortExposure(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation camAbortExposure");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			dev.camAbortExposure(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public void mntMoveNorth(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LOG.info("Executing operation mntMoveNorth");
		LogUtil.info(this, "Executing operation camAbortExposure");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntMoveNorth(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String fwGetCamera(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation fwGetCamera");
        validateSession(session);

		FilterWheelControl dev = new FilterWheelControl();
		try {
			return dev.fwGetCamera(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamSetZoom(java.lang.String session
	 * ,)java.lang.String deviceId ,)int value )*
	 */
	public void scamSetZoom(java.lang.String session,
			java.lang.String deviceId, int value) throws RtiError {
		LogUtil.info(this, "Executing operation scamSetZoom");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamSetZoom(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#wspSetMeasureStates(java.lang.String session
	 * ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble>
	 * states )*
	 */
	public void wspSetMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation wspSetMeasureStates");
		validateSession(session);

		WindSpeedSensorControl dev = new WindSpeedSensorControl();
		try {
			dev.wspSetMeasureStates(deviceId, states);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamSetContrast(java.lang.String session
	 * ,)java.lang.String deviceId ,)long value )*
	 */
	public void scamSetContrast(java.lang.String session,
			java.lang.String deviceId, long value) throws RtiError {
		LogUtil.info(this, "Executing operation scamSetContrast");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			dev.scamSetContrast(deviceId, value);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dwrSetTemperatureThreshold(java.lang.String
	 * session ,)java.lang.String deviceId ,)int channel ,)double temperature )*
	 */
	public void dwrSetTemperatureThreshold(java.lang.String session,
			java.lang.String deviceId, int channel, double temperature)
			throws RtiError {
		LogUtil.info(this, "Executing operation dwrSetTemperatureThreshold");
		validateSession(session);

		DewRemoverControl dev = new DewRemoverControl();
		try {
			dev.dwrSetTemperatureThreshold(deviceId, channel, temperature);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#strSetDistanceMeasureStates(java.lang.String
	 * session ,)java.lang.String deviceId
	 * ,)java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalLong>
	 * states )*
	 */
	public void strSetDistanceMeasureStates(
			java.lang.String session,
			java.lang.String deviceId,
			java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalLong> states)
			throws RtiError {
		LogUtil.info(this, "Executing operation strSetDistanceMeasureStates");
		validateSession(session);

        StormSensorControl dev = new StormSensorControl();
    	try {
    		dev.strSetDistanceMeasureStates(deviceId, states);
    	} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#domGoHome(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public void domGoHome(java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation domGoHome");
		validateSession(session);

		DomeControl dev = new DomeControl();
		try {
			dev.domGoHome(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbIsAvailableChunkAccess(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean dbIsAvailableChunkAccess(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation dbIsAvailableChunkAccess");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbIsAvailableChunkAccess(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}


	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#devGetDeviceProperties(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public java.util.List<eu.gloria.rt.entity.device.DeviceProperty> devGetDeviceProperties(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation devGetDeviceProperties");
		validateSession(session);

		DeviceManager dev = new DeviceManager();
		try {
			return dev.devGetDeviceProperties(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.util.List<eu.gloria.rt.entity.device.SensorStateIntervalDouble> barGetMeasureStates(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
		LogUtil.info(this, "Executing operation barGetMeasureStates");
		validateSession(session);

		BarometerControl dev = new BarometerControl();
		try {
			return dev.barGetMeasureStates(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#dbIsAvailableDirectAccess(java.lang.String
	 * session ,)java.lang.String deviceId )*
	 */
	public boolean dbIsAvailableDirectAccess(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation dbIsAvailableDirectAccess");
		validateSession(session);

		DBControl dev = new DBControl();
		try {
			return dev.dbIsAvailableChunkAccess(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#mntSlewToAltAz(java.lang.String session
	 * ,)java.lang.String deviceId ,)double azimuth ,)double altitude )*
	 */
	public void mntSlewToAltAz(java.lang.String session,
			java.lang.String deviceId, double azimuth, double altitude)
			throws RtiError {
		LogUtil.info(this, "Executing operation mntSlewToAltAz");
		validateSession(session);

		MountControl dev = new MountControl();
		try {
			dev.mntSlewToAltAz(deviceId, azimuth, altitude);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	public java.lang.String mntGetSlewRate(java.lang.String session,java.lang.String deviceId) throws RtiError    { 
        LOG.info("Executing operation mntGetSlewRate");
        validateSession(session);

		MountControl dev = new MountControl();
		try {
			return dev.mntGetSlewRate(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
    }

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#scamIsImageReady(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public boolean scamIsImageReady(java.lang.String session,
			java.lang.String deviceId) throws RtiError {
		LogUtil.info(this, "Executing operation scamIsImageReady");
		validateSession(session);

		SurveillanceCameraControl dev = new SurveillanceCameraControl();
		try {
			return dev.scamIsImageReady(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see eu.gloria.rti.GloriaRti#camGetImageDataType(java.lang.String session
	 * ,)java.lang.String deviceId )*
	 */
	public eu.gloria.rt.entity.device.ImageContentType camGetImageDataType(
			java.lang.String session, java.lang.String deviceId)
			throws RtiError {
		LogUtil.info(this, "Executing operation camGetImageDataType");
		validateSession(session);

		CameraControl dev = new CameraControl();
		try {
			return dev.camGetImageDataType(deviceId);
		} catch (Exception e) {
			throw RtiExceptionFactory.getRtiException(e);
		}
	}

}
